#!/usr/bin/env python
import os
import django
from collections import defaultdict

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jaelleshop.settings')
django.setup()

from products.models import Category, SubCategory, Product

def create_subcategories():
    """Cr√©er des sous-cat√©gories bas√©es sur les types de produits"""
    
    print("üèóÔ∏è === Cr√©ation des sous-cat√©gories ===\n")
    
    # Mapping des sous-cat√©gories par cat√©gorie principale
    SUBCATEGORIES_MAPPING = {
        'Enfants': [
            ('V√™tements filles', 'Robes, jupes, t-shirts et v√™tements pour filles'),
            ('V√™tements gar√ßons', 'T-shirts, pantalons et v√™tements pour gar√ßons'),
            ('Chaussures', 'Sneakers, baskets, sandales et bottes pour enfants'),
            ('Accessoires', 'Ceintures, √©charpes et accessoires pour enfants'),
            ('Jouets', 'Jeux, puzzles et jouets √©ducatifs')
        ],
        'Femmes': [
            ('V√™tements', 'T-shirts, pulls, chemises, robes et pantalons'),
            ('Chaussures', 'Sneakers, baskets, sandales et bottes'),
            ('Montres', 'Montres analogiques et smartwatches'),
            ('Casquettes/Sacs', 'Casquettes, sacs √† main et sacs √† dos'),
            ('Accessoires', 'Ceintures, colliers, gants et bijoux'),
            ('Produits cosm√©tiques', 'Parfums, cr√®mes et produits de beaut√©')
        ],
        'Hommes': [
            ('V√™tements', 'T-shirts, pulls, chemises, vestes et pantalons'),
            ('Chaussures', 'Sneakers, baskets, sandales et bottes'),
            ('Montres', 'Montres analogiques et smartwatches'),
            ('Casquettes/Sacs', 'Casquettes, sacs √† dos et sacs de sport'),
            ('Accessoires', 'Ceintures, colliers, gants et √©charpes'),
            ('Produits cosm√©tiques', 'Parfums, gels douche et d√©odorants')
        ]
    }
    
    created_count = 0
    updated_count = 0
    
    for category_name, subcategories in SUBCATEGORIES_MAPPING.items():
        try:
            category = Category.objects.get(name=category_name)
            print(f"üìÅ Cat√©gorie: {category.name}")
            
            for subcategory_name, description in subcategories:
                subcategory, created = SubCategory.objects.get_or_create(
                    category=category,
                    name=subcategory_name,
                    defaults={
                        'description': description,
                        'is_published': True
                    }
                )
                
                if created:
                    print(f"  ‚úÖ Cr√©√©: {subcategory_name}")
                    created_count += 1
                else:
                    # Mettre √† jour la description et publier
                    subcategory.description = description
                    subcategory.is_published = True
                    subcategory.save()
                    print(f"  üîÑ Mis √† jour: {subcategory_name}")
                    updated_count += 1
            
            print()
            
        except Category.DoesNotExist:
            print(f"‚ùå Cat√©gorie '{category_name}' non trouv√©e")
    
    # Assigner automatiquement les produits aux sous-cat√©gories
    print("üîó === Assignment automatique des produits ===\n")
    assign_products_to_subcategories()
    
    print(f"üìä === R√©sultats ===")
    print(f"Sous-cat√©gories cr√©√©es: {created_count}")
    print(f"Sous-cat√©gories mises √† jour: {updated_count}")
    print(f"Total sous-cat√©gories: {SubCategory.objects.count()}")
    print("\n‚ú® Cr√©ation des sous-cat√©gories termin√©e ! ‚ú®")

def detect_subcategory_from_product(product, category_name):
    """D√©tecte la sous-cat√©gorie appropri√©e pour un produit"""
    name_lower = product.name.lower()
    
    if category_name == 'Enfants':
        if any(word in name_lower for word in ['jupe', 'robe']) or 'filles' in name_lower:
            return 'V√™tements filles'
        elif any(word in name_lower for word in ['t-shirt', 'pantalon', 'pyjama']) or 'gar√ßons' in name_lower:
            return 'V√™tements gar√ßons'
        elif any(word in name_lower for word in ['sneakers', 'baskets', 'sandales', 'bottes']):
            return 'Chaussures'
        elif any(word in name_lower for word in ['ceinture', '√©charpe']):
            return 'Accessoires'
        elif any(word in name_lower for word in ['jeu', 'puzzle', 'voiture', 'fisher', 'playmobil', 'mattel']):
            return 'Jouets'
        else:
            return 'V√™tements gar√ßons'  # Par d√©faut
    
    elif category_name == 'Femmes':
        if any(word in name_lower for word in ['sneakers', 'baskets', 'sandales', 'bottes']):
            return 'Chaussures'
        elif any(word in name_lower for word in ['montre', 'smartwatch']):
            return 'Montres'
        elif any(word in name_lower for word in ['sac', 'casquette']):
            return 'Casquettes/Sacs'
        elif any(word in name_lower for word in ['parfum', 'cr√®me', 'lotion']):
            return 'Produits cosm√©tiques'
        elif any(word in name_lower for word in ['ceinture', 'collier', 'gants', 'bracelet']):
            return 'Accessoires'
        else:
            return 'V√™tements'  # Par d√©faut
    
    elif category_name == 'Hommes':
        if any(word in name_lower for word in ['sneakers', 'baskets', 'sandales', 'bottes', 'mocassins']):
            return 'Chaussures'
        elif any(word in name_lower for word in ['montre', 'smartwatch']):
            return 'Montres'
        elif any(word in name_lower for word in ['sac', 'casquette']):
            return 'Casquettes/Sacs'
        elif any(word in name_lower for word in ['parfum', 'gel douche', 'd√©odorant']):
            return 'Produits cosm√©tiques'
        elif any(word in name_lower for word in ['ceinture', 'collier', 'gants', '√©charpe']):
            return 'Accessoires'
        else:
            return 'V√™tements'  # Par d√©faut
    
    return None

def assign_products_to_subcategories():
    """Assigner automatiquement les produits aux sous-cat√©gories"""
    products = Product.objects.all()
    assigned_count = 0
    
    for product in products:
        category_name = product.category.name
        subcategory_name = detect_subcategory_from_product(product, category_name)
        
        if subcategory_name:
            try:
                subcategory = SubCategory.objects.get(
                    category=product.category,
                    name=subcategory_name
                )
                
                if product.subcategory != subcategory:
                    product.subcategory = subcategory
                    product.save()
                    print(f"  üîó {product.name} ‚Üí {subcategory_name}")
                    assigned_count += 1
                    
            except SubCategory.DoesNotExist:
                print(f"  ‚ùå Sous-cat√©gorie '{subcategory_name}' non trouv√©e pour {product.name}")
    
    print(f"\nüìä {assigned_count} produits assign√©s aux sous-cat√©gories")

if __name__ == "__main__":
    create_subcategories() 