// V√©rification des variables d'environnement Netlify
const path = require('path');
const fs = require('fs');
const dotenv = require('dotenv');

// Charger les variables d'environnement
dotenv.config();

console.log('üîç V√©rification des variables d\'environnement pour Netlify...\n');

// Variables critiques √† v√©rifier
const requiredVars = [
  'SUPABASE_URL',
  'SUPABASE_ANON_KEY',
  'VITE_API_URL'
];

// V√©rifier les variables d'environnement
console.log('1Ô∏è‚É£ Variables d\'environnement:');
let missingVars = 0;

requiredVars.forEach(varName => {
  if (process.env[varName]) {
    console.log(`‚úÖ ${varName}: ${varName.includes('KEY') ? '***[HIDDEN]***' : process.env[varName]}`);
  } else {
    console.log(`‚ùå ${varName}: Non d√©fini`);
    missingVars++;
  }
});

// V√©rifier si netlify.toml existe et contient les bonnes configurations
console.log('\n2Ô∏è‚É£ Configuration Netlify:');
const netlifyTomlPath = path.resolve(__dirname, 'netlify.toml');
let netlifyTomlContent = '';

try {
  netlifyTomlContent = fs.readFileSync(netlifyTomlPath, 'utf8');
  console.log('‚úÖ netlify.toml trouv√©');
  
  // V√©rifier la configuration des fonctions
  if (netlifyTomlContent.includes('[functions]')) {
    console.log('‚úÖ Configuration des fonctions trouv√©e');
  } else {
    console.log('‚ùå Configuration des fonctions manquante dans netlify.toml');
  }
  
  // V√©rifier les redirections
  if (netlifyTomlContent.includes('from = "/api/*"') && 
      netlifyTomlContent.includes('to = "/.netlify/functions/api/:splat"')) {
    console.log('‚úÖ Redirection API configur√©e correctement');
  } else {
    console.log('‚ùå Redirection API mal configur√©e ou manquante');
  }
  
  // V√©rifier les variables d'environnement de contexte
  if (netlifyTomlContent.includes('VITE_API_URL = "/.netlify/functions"')) {
    console.log('‚úÖ Variable VITE_API_URL configur√©e correctement dans netlify.toml');
  } else {
    console.log('‚ùå Variable VITE_API_URL mal configur√©e ou manquante dans netlify.toml');
  }
  
} catch (error) {
  console.log(`‚ùå Erreur lors de la lecture de netlify.toml: ${error.message}`);
}

// V√©rifier si api.js existe
console.log('\n3Ô∏è‚É£ Fonction API:');
const apiFunctionPath = path.resolve(__dirname, 'netlify', 'functions', 'api.js');

try {
  fs.accessSync(apiFunctionPath);
  console.log('‚úÖ api.js trouv√© dans netlify/functions/');
  
  // V√©rifier le contenu de api.js
  const apiContent = fs.readFileSync(apiFunctionPath, 'utf8');
  
  if (apiContent.includes('supabaseUrl') && apiContent.includes('supabaseKey')) {
    console.log('‚úÖ Configuration Supabase trouv√©e dans api.js');
  } else {
    console.log('‚ùå Configuration Supabase manquante dans api.js');
  }
  
  if (apiContent.includes('/products') && apiContent.includes('from(\'products_product\')')) {
    console.log('‚úÖ Endpoint des produits trouv√© dans api.js');
  } else {
    console.log('‚ùå Endpoint des produits manquant dans api.js');
  }
  
} catch (error) {
  console.log(`‚ùå api.js non trouv√©: ${error.message}`);
}

// R√©sum√© et recommandations
console.log('\nüìã R√©sum√©:');
if (missingVars > 0) {
  console.log(`‚ùå ${missingVars} variable(s) d'environnement manquante(s)`);
  console.log('‚ö†Ô∏è Assurez-vous de d√©finir toutes les variables d\'environnement requises dans Netlify et dans votre fichier .env local');
} else {
  console.log('‚úÖ Toutes les variables d\'environnement requises sont d√©finies');
}

console.log('\nüìå Recommandations pour la production:');
console.log('1. V√©rifiez que toutes les variables d\'environnement sont configur√©es dans le dashboard Netlify');
console.log('2. V√©rifiez que la base de donn√©es Supabase est accessible depuis la fonction Netlify');
console.log('3. V√©rifiez les journaux de d√©ploiement Netlify pour tout message d\'erreur');
console.log('4. V√©rifiez que les tables "products_product" et "products_category" existent dans Supabase et contiennent des donn√©es');
